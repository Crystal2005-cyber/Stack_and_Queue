#include <stdio.h>
#include <stdlib.h>
#define MAX 5

int queue[MAX];
int front = -1, rear = -1;

// Check if queue is full
int isFull() {
    return ((front == 0 && rear == MAX - 1) || (front == rear + 1));
}

// Check if queue is empty
int isEmpty() {
    return (front == -1);
}

// Enqueue (Insert element at rear)
void enqueue(int x) {
    if (isFull()) {
        printf("Queue is full! Cannot insert %d\n", x);
        return;
    }
    if (front == -1) { // First element
        front = rear = 0;
    } else if (rear == MAX - 1 && front != 0) {
        rear = 0; // wrap around
    } else {
        rear++;
    }
    queue[rear] = x;
    printf("%d enqueued.\n", x);
}

// Dequeue (Remove element from front)
void dequeue() {
    if (isEmpty()) {
        printf("Queue is empty! Cannot dequeue.\n");
        return;
    }
    printf("%d dequeued.\n", queue[front]);
    if (front == rear) { // Only one element
        front = rear = -1;
    } else if (front == MAX - 1) {
        front = 0;
    } else {
        front++;
    }
}

// Display queue
void display() {
    if (isEmpty()) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements: ");
    int i = front;
    while (1) {
        printf("%d ", queue[i]);
        if (i == rear) break;
        i = (i + 1) % MAX;
    }
    printf("\n");
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    display();

    dequeue();
    dequeue();
    display();

    enqueue(50);
    enqueue(60);
    display();

    dequeue();
    display();

    return 0;
}
